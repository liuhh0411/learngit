======================================================
性能瓶颈定位整体思路，从前到后，从表象到内部
1，首先排除压力机的性能情况，包括cpu、内存
2，应用服务器的硬件指标，cpu，内存，网络IO（ethtool eth0），磁盘IO
3，其他服务器，比如数据库服务器，依赖的其他应用服务器
4，看应用服务器的日志，tomcat下看的是catalina.out，用tail -200 catalina.out ，看cause by：xxx TimeOut
5，tps比较低，应用服务器cpu比较高，jvisualvm看下java进程，消耗cpu的方法
6，tps比较低，应用服务器cpu也比较低，可能是java程序的线程阻塞或死锁，也用jvisualvm看，如果红色的线程比较多，就是阻塞的原因，jstack pid
7，tps比较低，响应时间比较长，首先要先弄清楚请求的流向，比如：LR-->nginx-->tomcat-->java-->数据库-->缓存-->外部依赖--返回，如果排除到其他的问题,可以在java代码加时间戳的方法来定位响应时间比较长的问题

8，tps缓慢降低，或大幅降低，tps大幅波动，用jmap或者jvisualvm进行堆内存dump，用jstat -gcutil，看看是否有内存泄露趋势，Jvm的FullGC是否频繁
9，排查连接数相关的内容，包含tomcat的连接数、mysql的连接数，某端口的连接数：netstat -an|grep 8080 | wc -l
	关于连接数，要看2方面，首先是中间件最大配置的连接数，然后就是当前连接数
	tomcat的当前连接数用netstat可以看，略。最大连接数在
	一般tomcat需要设置的参数，第一个就是连接数在conf/server.xml里配置
	<Connector port="8080" protocol="HTTP/1.1"
               connectionTimeout="20000"
               redirectPort="8443" />
	maxThreads="200" 表示最多同时处理200个连接，默认值是200
	acceptCount="100" 当同时连接的人数达到maxThreads时，还可以接收排队的连接，超过这个连接的则直接返回拒绝连接。默认值为100	
	第二个jvm的参数，在bin目录下的catalina.sh第二行插入就行

==========================================================
tomcat连接数设置
netstat -an|grep 8080 |wc -l ：查看8080当前端口建立的连接数

maxThreads="200" 表示最多同时处理200个连接，默认值是200
minSpareThreads="10" 表示即使没有人使用也开这么多空线程等待，默认是10
maxSpareThreads="75" 表示如果最多可以空75个线程，例如某时刻有100人访问，之后没有人访问了，则tomcat不会保留100个空线程，而是关闭25个空的。
acceptCount="100" 当同时连接的人数达到maxThreads时，还可以接收排队的连接，超过这个连接的则直接返回拒绝连接。默认值为100

===========================================================
数据库架构的调优
	--读写分离：主从 配置
	--分库分表：根据一个id来路由库名和表名，id%16,1202922292
		database_0
		database_1
		database_2
		...
		database_16
		
	--硬件调优
		普通磁盘-raider
		SSD
	
应用程序架构调优
	--同步-异步
	--加缓存
	--循环调用和批量调用
		接口1，单条数据查询
			for (){
				调用接口1
			}
		接口2
			调用接口2		
	--分布式集群部署，加实例，加机器
	========================================================
